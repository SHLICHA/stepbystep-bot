import logging

from time import timezone
from aiogram import types, F
from aiogram.exceptions import TelegramBadRequest
from aiogram.fsm.context import FSMContext
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from django.db.models import Q
import logging

from bot.keyboards import get_goals_menu_kb, get_edit_goal_kb, get_delete_confirm_kb
from bot.services import get_user_goals, get_goals_by_category, get_goals_by_deadline
from goals.models import Goal

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.StreamHandler(),
        logging.FileHandler('goals.log')
    ]
)
logger = logging.getLogger(__name__)

def format_date(date_obj, default_text="–Ω–µ —É–∫–∞–∑–∞–Ω–æ"):
    return date_obj.strftime('%d.%m.%Y %H:%M') if date_obj else default_text

def _get_pagination_buttons(current_index: int, total: int) -> list[list[InlineKeyboardButton]]:
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–Ω–æ–ø–æ–∫ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ —Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
    logger.info(f"–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–Ω–æ–ø–æ–∫ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏. –¢–µ–∫—É—â–∞—è: {current_index}, –í—Å–µ–≥–æ: {total}")
    
    buttons = []
    if total > 1:
        row = []
        if current_index > 0:
            prev_btn = InlineKeyboardButton(
                text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", 
                callback_data=f"goal_prev_{current_index}"
            )
            row.append(prev_btn)
            logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω–∞ –∫–Ω–æ–ø–∫–∞ '–ù–∞–∑–∞–¥': {prev_btn.callback_data}")
        
        counter_btn = InlineKeyboardButton(
            text=f"{current_index+1}/{total}", 
            callback_data="no_action"
        )
        row.append(counter_btn)
        
        if current_index < total - 1:
            next_btn = InlineKeyboardButton(
                text="–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è", 
                callback_data=f"goal_next_{current_index}"
            )
            row.append(next_btn)
            logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω–∞ –∫–Ω–æ–ø–∫–∞ '–í–ø–µ—Ä–µ–¥': {next_btn.callback_data}")
        
        buttons.append(row)
    
    logger.info(f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–Ω–æ–ø–∫–∏: {buttons}")
    return buttons

async def show_goals_menu(callback: types.CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é '–ú–æ–∏ —Ü–µ–ª–∏'"""
    try:
        await callback.message.edit_text(
            "\U0001F4CB <b>–ú–æ–∏ —Ü–µ–ª–∏</b>\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è:",
            reply_markup=get_goals_menu_kb()
        )
    except TelegramBadRequest as e:
        logger.warning(f"Message not modified: {e}")
    except Exception as e:
        logger.error(f"Error showing goals menu: {e}")
        await callback.message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–µ–Ω—é")
    finally:
        await callback.answer()

async def show_active_goals(callback: types.CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ü–µ–ª–µ–π —Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
    try:
        logger.info("–ó–∞–≥—Ä—É–∑–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ü–µ–ª–µ–π...")
        goals = await get_user_goals(
            telegram_id=callback.from_user.id,
            filters={'is_completed': False}
        )
        
        logger.info(f"–ù–∞–π–¥–µ–Ω–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ü–µ–ª–µ–π: {len(goals)}")
        
        if not goals:
            logger.warning("–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ü–µ–ª–µ–π")
            await callback.message.edit_text(
                "üõë –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ü–µ–ª–µ–π!",
                reply_markup=get_goals_menu_kb()
            )
            return
            
        logger.info("–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ü–µ–ª–µ–π –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏...")
        await state.update_data(
            goals=goals,
            current_index=0,
            goals_type='active'
        )
        
        logger.info("–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–µ—Ä–≤–æ–π —Ü–µ–ª–∏...")
        await _display_goal_page(callback, goals[0], 0, len(goals))
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ü–µ–ª–µ–π: {e}")
        await callback.message.answer(
            "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ü–µ–ª–µ–π",
            reply_markup=get_goals_menu_kb()
        )
    finally:
        await callback.answer()

async def _display_goal_page(callback: types.CallbackQuery, goal: Goal, index: int, total: int):
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –≤—ã–≤–æ–¥ —Ü–µ–ª–∏ —Å –∫–Ω–æ–ø–∫–æ–π —É–¥–∞–ª–µ–Ω–∏—è"""
    text = (
        f"üìå <b>–¶–µ–ª—å {index+1}/{total}</b>\n\n"
        f"<b>{goal.title}</b>\n"
        f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {goal.category}\n"
        f"–°—Ä–æ–∫: {format_date(goal.deadline, '–Ω–µ—Ç —Å—Ä–æ–∫–∞')}"
    )
    
    builder = InlineKeyboardBuilder()
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
    if goal.is_completed:
        builder.row(
            InlineKeyboardButton(text="‚Ü©Ô∏è –í–µ—Ä–Ω—É—Ç—å –≤ —Ä–∞–±–æ—Ç—É", callback_data=f"goal_reactivate_{goal.id}"),
            InlineKeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å", callback_data=f"goal_delete_{goal.id}"),
            width=2
        )
    else:
        builder.row(
            InlineKeyboardButton(text="‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–∞", callback_data=f"goal_complete_{goal.id}"),
            InlineKeyboardButton(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"goal_edit_{goal.id}"),
            InlineKeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å", callback_data=f"goal_delete_{goal.id}"),
            width=2
        )
    
    # –ö–Ω–æ–ø–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    if total > 1:
        pagination_buttons = []
        if index > 0:
            pagination_buttons.append(InlineKeyboardButton(
                text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", 
                callback_data=f"goal_prev_{index}"
            ))
        
        pagination_buttons.append(InlineKeyboardButton(
            text=f"{index+1}/{total}", 
            callback_data="no_action"
        ))
        
        if index < total - 1:
            pagination_buttons.append(InlineKeyboardButton(
                text="–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è", 
                callback_data=f"goal_next_{index}"
            ))
        
        builder.row(*pagination_buttons)
    
    # –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ (—Ä–∞–∑–Ω—ã–µ –¥–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö)
    back_button = InlineKeyboardButton(
        text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", 
        callback_data="goals_completed" if goal.is_completed else "goals_active"
    )
    builder.row(back_button)
    
    await callback.message.edit_text(
        text,
        reply_markup=builder.as_markup(),
        parse_mode="HTML"
    )

async def handle_goal_navigation(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –º–µ–∂–¥—É —Ü–µ–ª—è–º–∏ —Å –ø–æ–ª–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
    try:
        logger.info(f"–ü–æ–ª—É—á–µ–Ω callback: {callback.data}")
        
        data = await state.get_data()
        goals = data.get('goals', [])
        logger.info(f"–ù–∞–π–¥–µ–Ω–æ —Ü–µ–ª–µ–π –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏: {len(goals)}")
        
        if not goals:
            logger.error("–í —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –Ω–µ—Ç —Ü–µ–ª–µ–π!")
            await callback.answer("–ù–µ—Ç —Ü–µ–ª–µ–π –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è")
            return
            
        current_index = data.get('current_index', 0)
        logger.info(f"–¢–µ–∫—É—â–∏–π –∏–Ω–¥–µ–∫—Å: {current_index}")
        
        # –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ callback_data
        try:
            _, action, index_str = callback.data.split('_')
            index = int(index_str)
            logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è: {action}, –∏–Ω–¥–µ–∫—Å: {index}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ callback_data: {e}")
            await callback.answer("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã")
            return

        # –í—ã—á–∏—Å–ª—è–µ–º –Ω–æ–≤—ã–π –∏–Ω–¥–µ–∫—Å
        new_index = current_index
        if action == 'next':
            new_index = min(index + 1, len(goals) - 1)
            logger.info(f"–ö–Ω–æ–ø–∫–∞ '–í–ø–µ—Ä–µ–¥'. –ù–æ–≤—ã–π –∏–Ω–¥–µ–∫—Å: {new_index}")
        elif action == 'prev':
            new_index = max(index - 1, 0)
            logger.info(f"–ö–Ω–æ–ø–∫–∞ '–ù–∞–∑–∞–¥'. –ù–æ–≤—ã–π –∏–Ω–¥–µ–∫—Å: {new_index}")
        
        if new_index == current_index:
            logger.info("–ò–Ω–¥–µ–∫—Å –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è")
            await callback.answer()
            return
            
        logger.info(f"–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–∞ —Å {current_index} –Ω–∞ {new_index}")
        await state.update_data(current_index=new_index)
        
        # –ü–æ–ª—É—á–∞–µ–º —Ü–µ–ª—å
        goal = goals[new_index]
        logger.info(f"–û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ü–µ–ª—å: ID={goal.id}, '{goal.title}'")
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        text = (
            f"üìå <b>–¶–µ–ª—å {new_index+1}/{len(goals)}</b>\n\n"
            f"<b>{goal.title}</b>\n"
            f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {goal.category}\n"
            f"–°—Ä–æ–∫: {goal.deadline.strftime('%d.%m.%Y') if goal.deadline else '–Ω–µ—Ç —Å—Ä–æ–∫–∞'}"
        )
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        kb = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–∞", 
                    callback_data=f"complete_{goal.id}"
                ),
                InlineKeyboardButton(
                    text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", 
                    callback_data=f"edit_{goal.id}"
                )
            ],
            *_get_pagination_buttons(new_index, len(goals)),
            [
                InlineKeyboardButton(
                    text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", 
                    callback_data="back_to_goals_menu"
                )
            ]
        ])
        
        try:
            await callback.message.edit_text(
                text,
                reply_markup=kb,
                parse_mode="HTML"
            )
            logger.info("–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ")
        except TelegramBadRequest as e:
            logger.error(f"–û—à–∏–±–∫–∞ Telegram –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
            await callback.answer("–û–±–Ω–æ–≤–∏—Ç–µ —Å–ø–∏—Å–æ–∫ —Ü–µ–ª–µ–π")
        
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏: {e}", exc_info=True)
        await callback.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏")

async def show_completed_goals(callback: types.CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö —Ü–µ–ª–µ–π"""
    try:
        goals = await get_user_goals(
            telegram_id=callback.from_user.id,
            filters={'is_completed': True}
        )
        
        if not goals:
            await callback.message.edit_text(
                "üéâ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö —Ü–µ–ª–µ–π!",
                reply_markup=get_goals_menu_kb()
            )
            return
            
        await state.update_data(
            goals=goals,
            current_index=0,
            goals_type='completed'
        )
        
        await _display_goal_page(callback, goals[0], 0, len(goals))
        
    except Exception as e:
        logger.error(f"Error showing completed goals: {e}")
        await callback.message.answer(
            "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö —Ü–µ–ª–µ–π",
            reply_markup=get_goals_menu_kb()
        )
    finally:
        await callback.answer()

async def show_goals_by_deadline(callback: types.CallbackQuery):
    """–ü–æ–∫–∞–∑ —Ü–µ–ª–µ–π, —Å–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ —Å—Ä–æ–∫–∞–º"""
    try:
        goals_by_deadline = await get_goals_by_deadline(callback.from_user.id)
        
        if not goals_by_deadline:
            await callback.message.edit_text(
                "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ü–µ–ª–µ–π –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ —Å—Ä–æ–∫–∞–º",
                reply_markup=get_goals_menu_kb()
            )
            return
        
        text = "üìÖ <b>–¶–µ–ª–∏ –ø–æ —Å—Ä–æ–∫–∞–º:</b>\n\n"
        for group, goals in goals_by_deadline.items():
            text += f"<b>{group}:</b>\n"
            text += "\n".join(
                f"‚Ä¢ {goal.title} ({goal.deadline.strftime('%d.%m.%Y') if goal.deadline else '–±–µ–∑ —Å—Ä–æ–∫–∞'})" 
                for goal in goals
            )
            text += "\n\n"
        
        await callback.message.edit_text(
            text,
            reply_markup=get_goals_menu_kb(),
            parse_mode="HTML"
        )
    except Exception as e:
        logger.error(f"Error showing goals by deadline: {e}")
        await callback.message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ü–µ–ª–µ–π –ø–æ —Å—Ä–æ–∫–∞–º")
    finally:
        await callback.answer()

async def show_goals_by_category(callback: types.CallbackQuery):
    """–ü–æ–∫–∞–∑ —Ü–µ–ª–µ–π, —Å–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º"""
    try:
        goals_by_category = await get_goals_by_category(callback.from_user.id)
        
        if not goals_by_category:
            await callback.message.edit_text(
                "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ü–µ–ª–µ–π –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º",
                reply_markup=get_goals_menu_kb()
            )
            return
        
        # –°—Ç—Ä–æ–∏–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
        builder = InlineKeyboardBuilder()
        for category in goals_by_category.keys():
            builder.button(
                text=f"{category} ({len(goals_by_category[category])})",
                callback_data=f"show_category_{category}"
            )
        builder.button(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_goals_menu")
        builder.adjust(1)  # –ü–æ –æ–¥–Ω–æ–π –∫–Ω–æ–ø–∫–µ –≤ —Å—Ç—Ä–æ–∫–µ
        
        await callback.message.edit_text(
            "üìÇ <b>–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:</b>",
            reply_markup=builder.as_markup(),
            parse_mode="HTML"
        )
    except Exception as e:
        logger.error(f"Error showing goals by category: {e}")
        await callback.message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ü–µ–ª–µ–π –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º")
    finally:
        await callback.answer()

async def show_goals_in_category(callback: types.CallbackQuery):
    """–ü–æ–∫–∞–∑ —Ü–µ–ª–µ–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    try:
        category = callback.data.split('_')[-1]
        
        goals_query = Goal.objects.filter(
            user__telegram_id=callback.from_user.id,
            category=category,
            is_completed=False
        ).order_by('deadline')

        goals = []
        async for goal in goals_query:
            goals.append({
                'title': goal.title,
                'deadline': goal.deadline
            })
        
        text = f"üìÇ <b>–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category}</b>\n\n"
        text += "\n".join(
            f"‚Ä¢ {goal['title']} ({goal['deadline'].strftime('%d.%m.%Y') if goal['deadline'] else '–±–µ–∑ —Å—Ä–æ–∫–∞'})"
            for goal in goals
        )
        
        await callback.message.edit_text(
            text,
            reply_markup=get_goals_menu_kb(),
            parse_mode="HTML"
        )
    except Exception as e:
        logger.error(f"Error showing goals in category: {e}")
        await callback.message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ü–µ–ª–µ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")
    finally:
        await callback.answer()

async def show_goal_detail(callback: types.CallbackQuery):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Ü–µ–ª–∏"""
    try:
        goal_id = int(callback.data.split('_')[-1])
        goal = await Goal.objects.aget(id=goal_id)
        
        await callback.message.edit_text(
            f"üìå <b>{goal.title}</b>\n\n"
            f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {goal.category}\n"
            f"–°—Ä–æ–∫: {format_date(goal.deadline, '–Ω–µ—Ç —Å—Ä–æ–∫–∞')}\n"
            f"–°—Ç–∞—Ç—É—Å: {'‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–∞' if goal.is_completed else 'üü° –í –ø—Ä–æ—Ü–µ—Å—Å–µ'}\n"
            f"–°–æ–∑–¥–∞–Ω–∞: {format_date(goal.created_at)}",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [
                    InlineKeyboardButton(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"goal_edit_{goal.id}"),
                    InlineKeyboardButton(text="‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–∞", callback_data=f"goal_complete_{goal.id}")
                ],
                [
                    InlineKeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å", callback_data=f"goal_delete_{goal.id}"),
                    InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_goals_menu")
                ]
            ]),
            parse_mode="HTML"
        )
    except Goal.DoesNotExist:
        await callback.answer("–¶–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
    except Exception as e:
        logger.error(f"Error showing goal detail: {e}")
        await callback.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ü–µ–ª–∏")
    finally:
        await callback.answer()

async def refresh_goals_list(callback: types.CallbackQuery, state: FSMContext):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ü–µ–ª–µ–π"""
    try:
        await callback.answer("üîÑ –û–±–Ω–æ–≤–ª—è—é —Å–ø–∏—Å–æ–∫...")
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Ç–∏–ø —Ü–µ–ª–µ–π –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        data = await state.get_data()
        goals_type = data.get('goals_type', 'active')
        
        # –í –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –≤—ã–∑—ã–≤–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é —Ñ—É–Ω–∫—Ü–∏—é
        if goals_type == 'completed':
            await show_completed_goals(callback, state)
        else:
            await show_active_goals(callback, state)
            
    except Exception as e:
        logger.error(f"Error refreshing goals list: {e}")
        await callback.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏")