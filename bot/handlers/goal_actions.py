import datetime

from aiogram import types, F
from aiogram.fsm.context import FSMContext
from aiogram.exceptions import TelegramBadRequest
from aiogram.filters.state import State, StatesGroup
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from django.utils import timezone

from core.models import User
from goals.models import Goal
from bot.services import calculate_deadline, get_user_goals
from bot.keyboards import (
    get_main_menu_kb,
    get_goals_menu_kb,
    get_edit_goal_kb,
    get_deadline_kb,
    get_delete_confirm_kb  # –î–æ–±–∞–≤–∏–º —ç—Ç—É —Ñ—É–Ω–∫—Ü–∏—é
)
from bot.handlers.my_goals import show_active_goals, show_completed_goals, format_date


class GoalEditStates(StatesGroup):
    editing_title = State()
    editing_deadline = State()
    editing_category = State()

async def _verify_goal_owner(telegram_id: int, goal_id: int) -> Goal:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–ª–∞–¥–µ–ª—å—Ü–∞ —Ü–µ–ª–∏ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—ä–µ–∫—Ç"""
    try:
        goal = await Goal.objects.select_related('user').aget(
            id=goal_id,
            user__telegram_id=telegram_id
        )
        return goal
    except Goal.DoesNotExist:
        raise TelegramBadRequest("–¶–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
    
async def save_goal_with_category(callback: types.CallbackQuery, state: FSMContext):
    try:
        data = await state.get_data()
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫—É –¥–∞—Ç—ã –æ–±—Ä–∞—Ç–Ω–æ –≤ datetime
        deadline_str = data.get('deadline')
        deadline = datetime.strptime(deadline_str, '%Y-%m-%d').date() if deadline_str else None
        
        goal = await Goal.objects.acreate(
            user=await User.objects.aget(telegram_id=callback.from_user.id),
            title=data['title'],
            category=data['category'],
            deadline=deadline,  # –ú–æ–∂–µ—Ç –±—ã—Ç—å None
            is_completed=False
        )
        await callback.message.answer(
            f"‚úÖ –¶–µ–ª—å —Å–æ–∑–¥–∞–Ω–∞!\n–°—Ä–æ–∫: {goal.deadline.strftime('%d.%m.%Y') if goal.deadline else '–Ω–µ —É–∫–∞–∑–∞–Ω'}",
            reply_markup=get_main_menu_kb()
        )
        await state.clear()
        
    except Exception as e:
        await callback.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ü–µ–ª–∏")
        await state.clear()

async def complete_goal(callback: types.CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ—Ç–∫–∞ —Ü–µ–ª–∏ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π"""
    goal_id = int(callback.data.split('_')[-1])
    goal = await _verify_goal_owner(callback.from_user.id, goal_id)
    
    await Goal.objects.filter(id=goal_id).aupdate(
        is_completed=True,
        completed_at=timezone.now()  # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–æ—Å—Ç–∞–≤–∏—Ç—Å—è –≤ save()
    )
    
    await callback.answer("‚úÖ –¶–µ–ª—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∞!")
    await show_active_goals(callback, state)

async def delete_goal(callback: types.CallbackQuery, state: FSMContext):
    """–£–¥–∞–ª–µ–Ω–∏–µ —Ü–µ–ª–∏ —Å —É—á–µ—Ç–æ–º —Ç–µ–∫—É—â–µ–≥–æ —Ä–∞–∑–¥–µ–ª–∞"""
    try:
        goal_id = int(callback.data.split('_')[-1])
        goal = await _verify_goal_owner(callback.from_user.id, goal_id)
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Ç–∏–ø —Ü–µ–ª–µ–π –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        data = await state.get_data()
        goals_type = data.get('goals_type', 'active')
        
        await Goal.objects.filter(id=goal_id).adelete()
        await callback.answer("üóë –¶–µ–ª—å —É–¥–∞–ª–µ–Ω–∞!")
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —Ä–∞–∑–¥–µ–ª
        if goals_type == 'completed':
            await show_completed_goals(callback, state)
        else:
            await show_active_goals(callback, state)
            
    except Exception as e:
        await callback.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ü–µ–ª–∏")

async def confirm_delete_goal(callback: types.CallbackQuery, state: FSMContext):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è —Å —É—á–µ—Ç–æ–º —Ä–∞–∑–¥–µ–ª–∞"""
    try:
        goal_id = int(callback.data.split('_')[-1])
        goal = await _verify_goal_owner(callback.from_user.id, goal_id)
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–∏–ø —Ü–µ–ª–µ–π –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        data = await state.get_data()
        goals_type = data.get('goals_type', 'active')
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤–æ–∑–≤—Ä–∞—Ç–æ–º –≤ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª
        back_target = "goals_completed" if goals_type == 'completed' else "goals_active"
        
        await callback.message.edit_text(
            f"‚ùå –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Ü–µ–ª—å?\n\n"
            f"<b>{goal.title}</b>\n"
            f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {goal.category}\n"
            f"–°—Ä–æ–∫: {format_date(goal.deadline, '–Ω–µ—Ç —Å—Ä–æ–∫–∞')}",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [
                    InlineKeyboardButton(text="‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data=f"confirm_delete_{goal_id}"),
                    InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data=back_target)
                ]
            ]),
            parse_mode="HTML"
        )
        await callback.answer()
        
    except Exception as e:
        await callback.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ —É–¥–∞–ª–µ–Ω–∏—è")

async def start_edit_goal(callback: types.CallbackQuery, state: FSMContext):
    """–ú–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ü–µ–ª–∏ (–æ—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫)"""
    goal_id = int(callback.data.split('_')[-1])
    goal = await _verify_goal_owner(callback.from_user.id, goal_id)
    
    await state.update_data(edit_goal_id=goal_id)
    
    await callback.message.edit_text(
        f"‚úèÔ∏è <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ü–µ–ª–∏:</b>\n\n"
        f"<b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {goal.title}\n"
        f"<b>–ö–∞—Ç–µ–≥–æ—Ä–∏—è:</b> {goal.category}\n"
        f"<b>–°—Ä–æ–∫:</b> {goal.deadline.strftime('%d.%m.%Y') if goal.deadline else '–Ω–µ—Ç —Å—Ä–æ–∫–∞'}\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ —á—Ç–æ –∏–∑–º–µ–Ω–∏—Ç—å:",
        reply_markup=get_edit_goal_kb(goal_id),
        parse_mode="HTML"
    )
    await callback.answer()

async def start_edit_title(callback: types.CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è"""
    goal_id = int(callback.data.split('_')[-1])
    await _verify_goal_owner(callback.from_user.id, goal_id)
    
    await state.set_state(GoalEditStates.editing_title)
    await state.update_data(edit_goal_id=goal_id)
    
    await callback.message.edit_text(
        "‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ü–µ–ª–∏:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚óÄÔ∏è –û—Ç–º–µ–Ω–∞", callback_data=f"goal_edit_{goal_id}")]
        ])
    )
    await callback.answer()

async def finish_edit_title(message: types.Message, state: FSMContext):
    """–§–∏–Ω–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º—ã –∏–º–µ–Ω–Ω–æ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    if await state.get_state() != GoalEditStates.editing_title:
        return
    
    data = await state.get_data()
    goal_id = data['edit_goal_id']
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–ª–∏–Ω—ã –Ω–∞–∑–≤–∞–Ω–∏—è
    if len(message.text) < 3:
        await message.answer("‚ùå –°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ (–º–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞)")
        return
    if len(message.text) > 100:
        await message.answer("‚ùå –°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ (–º–∞–∫—Å–∏–º—É–º 100 —Å–∏–º–≤–æ–ª–æ–≤)")
        return
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Ü–µ–ª—å –≤ –±–∞–∑–µ
    await Goal.objects.filter(id=goal_id).aupdate(title=message.text)
    
    # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    goal = await Goal.objects.aget(id=goal_id)
    
    # 1. –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–ª–µ–º –≤–≤–æ–¥–∞
    try:
        await message.bot.delete_message(
            chat_id=message.chat.id,
            message_id=message.message_id - 1
        )
    except:
        pass
    
    # 2. –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    await message.answer(
        f"‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!\n\n"
        f"<b>{goal.title}</b>\n"
        f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {goal.category}\n"
        f"–°—Ä–æ–∫: {goal.deadline.strftime('%d.%m.%Y') if goal.deadline else '–Ω–µ—Ç —Å—Ä–æ–∫–∞'}",
        reply_markup=get_edit_goal_kb(goal_id),
        parse_mode="HTML"
    )
    
    # 3. –ü–æ–ª–Ω–æ—Å—Ç—å—é –æ—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()

async def start_edit_deadline(callback: types.CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ä–æ–∫–∞"""
    goal_id = int(callback.data.split('_')[-1])
    await _verify_goal_owner(callback.from_user.id, goal_id)
    
    await state.set_state(GoalEditStates.editing_deadline)
    await state.update_data(edit_goal_id=goal_id)
    
    await callback.message.edit_text(
        "üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π —Å—Ä–æ–∫:",
        reply_markup=get_deadline_kb()
    )
    await callback.answer()

async def finish_edit_deadline(callback: types.CallbackQuery, state: FSMContext):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Å—Ä–æ–∫–∞"""
    data = await state.get_data()
    goal_id = data['edit_goal_id']
    
    if callback.data.startswith('deadline_'):
        period = callback.data.split('_')[1]
        deadline_date = calculate_deadline(period)
        await Goal.objects.filter(id=goal_id).aupdate(deadline=deadline_date.date())
        await state.clear()
        
        goal = await Goal.objects.aget(id=goal_id)
        await callback.message.edit_text(
            f"‚úÖ –°—Ä–æ–∫ –æ–±–Ω–æ–≤–ª–µ–Ω!\n\n"
            f"<b>{goal.title}</b>\n"
            f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {goal.category}\n"
            f"–ù–æ–≤—ã–π —Å—Ä–æ–∫: {goal.deadline.strftime('%d.%m.%Y')}",
            reply_markup=get_edit_goal_kb(goal_id),
            parse_mode="HTML"
        )
    await callback.answer()

async def reactivate_goal(callback: types.CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ü–µ–ª—å –≤ –∞–∫—Ç–∏–≤–Ω—ã–µ"""
    goal_id = int(callback.data.split('_')[-1])
    goal = await _verify_goal_owner(callback.from_user.id, goal_id)
    
    await Goal.objects.filter(id=goal_id).aupdate(
        is_completed=False,
        completed_at=None
    )
    await callback.answer("üîô –¶–µ–ª—å –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∞ –≤ –∞–∫—Ç–∏–≤–Ω—ã–µ!")
    await show_completed_goals(callback, state)